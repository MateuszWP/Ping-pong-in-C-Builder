//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
#include "stdio.h"

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

        int x = -5;
        int y = -5;
        int count = 0;
        int point1 = 0;
        int point2 = 0;
        int timeToStart = 3;
        int s = 0;
        char winner = 'L';

//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
        : TForm(Owner)
{
}
//---------------------------------------------------------------------------

void __fastcall TForm1::T_BallTimer(TObject *Sender)
{
        Ball->Left += x;
        Ball->Top += y;

        //bounce against upper side
        if(Ball->Top-5 <= Background->Top) y = -y;

        //bounce against lower side
        if(Ball->Top+Ball->Height+5 >= Background->Height) y = -y;

        //defeat
        if(Ball->Left <= Paddle1->Left+Paddle1->Width-15)
        {
                point2++;
                winner = 'P';
                if(point2 < 6)
                {
                    Info->Caption = "Punkt dla prawego gracza >";
                    T_Stopwatch->Enabled = false;
                }
                else
                    Info->Caption = "Wygrana prawego gracza >";
                    T_Stopwatch->Enabled = false;
                Defeat();
        }
        if(Ball->Left+Ball->Width-15 >= Paddle2->Left)
        {
                point1++;
                winner = 'L';
                if(point1 < 6)
                {
                    Info->Caption = "< Punkt dla lewego gracza";
                    T_Stopwatch->Enabled = false;
                }
                else
                    Info->Caption = "< Wygrana lewego gracza";
                    T_Stopwatch->Enabled = false;
                Defeat();
        }

        //bounce against left paddle
        else if(Ball->Top > Paddle1->Top-Ball->Height/2 && Ball->Top < Paddle1->Top+Paddle1->Height                && Ball->Left < Paddle1->Left+Paddle1->Width)
                {
                        if(x<0) x = (x-1)*-1;
                        if(y>0) y = y + 0.5;
                        else y = y - 0.5;
                        count++;
                }

        //bounce against right paddle
        else if(Ball->Top > Paddle2->Top-Ball->Height/2 && Ball->Top < Paddle2->Top+Paddle2->Height                && Ball->Left+Ball->Width > Paddle2->Left)
                {
                        if(x>0) x = -1*(x+1);
                        if(y>0) y = y + 0.5;
                        else y = y - 0.5;
                        count++;
                }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Up1Timer(TObject *Sender)
{
        if(Paddle1->Top > 5) Paddle1->Top -= 10;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Down1Timer(TObject *Sender)
{
        if(Paddle1->Top + Paddle1->Height < Background->Height-10) Paddle1->Top += 10;        
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Up2Timer(TObject *Sender)
{
        if(Paddle2->Top > 5) Paddle2->Top -= 10;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Down2Timer(TObject *Sender)
{
        if(Paddle2->Top + Paddle2->Height < Background->Height-10) Paddle2->Top += 10;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormKeyDown(TObject *Sender, WORD &Key,
      TShiftState Shift)
{
        if(START->Visible == false)
        {
                if(Key == 'W') Up1->Enabled = true;
                if(Key == 'S') Down1->Enabled = true;
                if(Key == VK_UP) Up2->Enabled = true;
                if(Key == VK_DOWN) Down2->Enabled = true;
        }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormKeyUp(TObject *Sender, WORD &Key,
      TShiftState Shift)
{
        if(Key == 'W') Up1->Enabled = false;
        if(Key == 'S') Down1->Enabled = false;
        if(Key == VK_UP) Up2->Enabled = false;
        if(Key == VK_DOWN) Down2->Enabled = false;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::STARTClick(TObject *Sender)
{
        Reset();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormCreate(TObject *Sender)
{
        AnsiString text = "Witaj w grze PINGPONG!\n\n";
        AnsiString text2 = "Lewy gracz steruje klawiszami W i S.\n";
        AnsiString text3 = "Prawy gracz steruje srzalkami góra i dó³.\n\n";
        AnsiString text5 = "Gra toczy sie do 6 punktow.\n";
        AnsiString text6 = "Pilka przyspiesza z kazdym odbiciem od paletek.\n\n";
        AnsiString text7 = "Powodzenia!";
        ShowMessage(text + text2 + text3  + text5 + text6 + text7);

        Ball->Left = 420;
        Ball->Top = 370;
        Paddle1->Top = 160;
        Paddle1->Left = 20;
        Paddle2->Top = 160;
        Paddle2->Left = 860;
        T_Ball->Enabled = false;
        Ball->Visible =  false;
        Info->Visible = false;
        Bounce->Visible = false;
        Table->Visible = false;
        New_game->Visible = false;
        Time->Visible = false;
        T_Stopwatch->Enabled = false;
        Stopwatch->Visible = false;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Defeat()
{
        T_Ball->Enabled = false;
        Ball->Visible = false;
        if(point1 < 6 && point2 < 6)
        {
                START->Caption = "Nastêpna runda";
                START->Visible = true;
        }
        Info->Visible = true;
        Bounce->Caption = "Ilosc odbic: " + InttoString(count);
        Bounce->Visible = true;
        Table->Caption = InttoString(point1) + ":" + InttoString(point2);
        Table->Visible = true;
        New_game->Visible = true;
}

AnsiString __fastcall TForm1::InttoString(int number)
{
        AnsiString tmp;
        sprintf((char*)tmp.c_str(), "%d", number);
        AnsiString str = tmp.c_str();
        return str;
}
void __fastcall TForm1::New_gameClick(TObject *Sender)
{
       s = 0;
       Stopwatch->Caption = "00:00:00";
       T_Stopwatch->Enabled = false;
       Reset();
       point1 = 0;
       point2 = 0;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Reset()
{
        Ball->Left = 420;
        Ball->Top = 210;
        Paddle1->Top = 160;
        Paddle1->Left = 20;
        Paddle2->Top = 160;
        Paddle2->Left = 860;
        Ball->Visible = false;
        if(winner == 'L')
        {
                x = 5;
                y = 5;
        }
        else
                x = -5;
                y = -5;

        START->Visible = false;
        Info->Visible = false;
        count = 0;
        Bounce->Visible = false;
        Table->Visible = false;
        New_game->Visible = false;
        timeToStart = 3;
        T_Start->Enabled = true;
}
void __fastcall TForm1::T_StartTimer(TObject *Sender)
{
       Time->Visible = true;
       Time->Caption = timeToStart--;
       if(timeToStart < 0)
       {
                T_Ball->Enabled = true;
                Ball->Visible = true;
                Time->Visible = false;
                T_Start->Enabled = false;
                T_Stopwatch->Enabled = true;
                Stopwatch->Visible = true;
       }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::T_StopwatchTimer(TObject *Sender)
{
        s++;

        int hour, min, sek;
        AnsiString hours, minutes, sekundes;

        hour = s/3600;
        hours =  InttoString(hour);
        if(hour < 10) hours = "0" + hours;

        min = (s - hour*3600)/60;
        minutes = InttoString(min);
        if(min < 10) minutes = "0" + minutes;

        sek = s - hour*3600 - min*60;
        sekundes = InttoString(sek);
        if(sek < 10) sekundes = "0" + sekundes;

        Stopwatch->Caption = hours + ":" + minutes + ":" + sekundes;

}
//---------------------------------------------------------------------------


